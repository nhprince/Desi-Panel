#!/usr/bin/env bash
set -e # Exit immediately if a command exits with a non-zero status.

# --- Helper Functions for Colors and Printing ---
if tput setaf 1 >&/dev/null; then
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    NC=$(tput sgr0) # No Color
else
    RED='\\033[0;31m'
    GREEN='\\033[0;32m'
    NC='\\033[0m'
fi

print_error() {
    printf "${RED}Error: %s${NC}\\n" "$1"
}

print_success() {
    printf "${GREEN}%s${NC}\\n" "$1"
}

# --- Prerequisite Check ---
check_command() {
    if ! command -v "$1" &> /dev/null; then
        print_error "'$1' command not found. Please install it and re-run the script."
        exit 1
    fi
}
echo "Checking prerequisites..."
check_command "npm"
check_command "git"
print_success "Prerequisites met."
echo ""


# --- ASCII Logo ---
echo ''
echo '  ██████╗ ███████╗███████╗██╗     '
echo '  ██╔═══██╗██╔════╝██╔════╝██║     '
echo '  ██║   ██║███████╗███████╗██║     '
echo '  ██║   ██║╚════██║╚════██║██║     '
echo '  ██████╔╝███████║███████║███████╗'
echo '  ╚═════╝ ╚══════╝╚══════╝╚══════╝'
echo '    ██████╗  █████╗ ███╗   ██╗███████╗██╗'
echo '    ██╔══██╗██╔══██╗████╗  ██║██╔════╝██║'
echo '    ██████╔╝███████║██╔██╗ ██║█████╗  ██║'
echo '    ██╔═══╝ ██╔══██║██║╚██╗██║██╔══╝  ██║'
echo '    ██║     ██║  ██║██║ ╚████║███████╗███████╗'
echo '    ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝╚══════╝╚══════╝'
echo ''
echo "Welcome to the Desi Panel Installer for Linux"
echo "This script will guide you through setting up the required environment variables."
echo ""

# --- Database Configuration ---
echo "--- Database Configuration ---"
DB_URL_REGEX="^postgres(ql)?://.+"
while true; do
    read -p "Enter the PostgreSQL URL (e.g., postgres://user:pass@host:5432/dbname): " DATABASE_URL
    if [[ -z "$DATABASE_URL" ]]; then
        print_error "Database URL cannot be empty."
    elif [[ ! "$DATABASE_URL" =~ $DB_URL_REGEX ]]; then
        print_error "Invalid PostgreSQL URL format. It should start with 'postgres://' or 'postgresql://'."
    else
        break
    fi
done

# --- Security Configuration ---
echo ""
echo "--- Security Configuration ---"
while true; do
    read -s -p "Enter a strong, random JWT Secret (at least 32 characters recommended): " JWT_SECRET
    printf "\\n"
    if [ ${#JWT_SECRET} -lt 32 ]; then
        print_error "JWT Secret is too short. For security, please provide at least 32 characters."
    else
        break
    fi
done

# --- Control Panel Admin Credentials ---
echo ""
echo "--- Control Panel Admin Credentials ---"
echo "Set the initial login for the Desi Panel web interface."

EMAIL_REGEX="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
while true; do
    read -p "Admin Email: " ADMIN_EMAIL
    if [[ "$ADMIN_EMAIL" =~ $EMAIL_REGEX ]]; then
        break
    else
        print_error "Please enter a valid email address."
    fi
done

PASSWORD_MIN_LENGTH=12
while true; do
    read -s -p "Admin Password (min ${PASSWORD_MIN_LENGTH} characters): " ADMIN_PASSWORD
    printf "\\n"
    if [ ${#ADMIN_PASSWORD} -lt ${PASSWORD_MIN_LENGTH} ]; then
        print_error "Password must be at least ${PASSWORD_MIN_LENGTH} characters long."
        continue
    fi
    read -s -p "Confirm Admin Password: " ADMIN_PASSWORD_CONFIRM
    printf "\\n"
    if [ "$ADMIN_PASSWORD" == "$ADMIN_PASSWORD_CONFIRM" ]; then
        break
    else
        print_error "Passwords do not match. Please try again."
    fi
done

# --- Application Settings ---
echo ""
echo "--- Application Settings ---"
FRONTEND_ORIGIN_DEFAULT="http://$(hostname -I | awk '{print $1}')" # Guess local IP
if [[ -z "$FRONTEND_ORIGIN_DEFAULT" ]]; then
    FRONTEND_ORIGIN_DEFAULT="http://localhost:5173"
fi

FILES_ROOT_DEFAULT="/var/lib/desi-panel/storage"

read -p "Enter the Frontend Origin URL [${FRONTEND_ORIGIN_DEFAULT}]: " FRONTEND_ORIGIN
read -p "Enter the absolute path for user files [${FILES_ROOT_DEFAULT}]: " FILES_ROOT

FRONTEND_ORIGIN=${FRONTEND_ORIGIN:-$FRONTEND_ORIGIN_DEFAULT}
FILES_ROOT=${FILES_ROOT:-$FILES_ROOT_DEFAULT}

if [[ ! "$FILES_ROOT" =~ ^/ ]]; then
    print_error "The root directory for user files must be an absolute path (start with '/')."
    exit 1
fi


# --- Create Environment File ---
ENV_FILE="backend/.env"
echo ""
echo "Creating environment file at $ENV_FILE..."
mkdir -p backend
cat > "$ENV_FILE" <<EOF
# Desi Panel Environment Configuration
# Generated by install.sh on $(date)

# Backend Server Configuration
PORT=4000
NODE_ENV=production

# Database
DATABASE_URL=${DATABASE_URL}

# Security
JWT_SECRET=${JWT_SECRET}
FRONTEND_ORIGIN=${FRONTEND_ORIGIN}

# Initial Admin User (for first database migration)
ADMIN_EMAIL=${ADMIN_EMAIL}
ADMIN_PASSWORD=${ADMIN_PASSWORD}

# File System
FILES_ROOT=${FILES_ROOT}
EOF

print_success "Successfully wrote configuration to $ENV_FILE"
echo ""
echo "--- Installation Complete! ---"
echo ""
echo "IMPORTANT: The admin password has been stored in backend/.env. It is used only on the first run to seed the database. You can remove the ADMIN_PASSWORD line from the .env file after the first successful startup for enhanced security."
echo ""
echo "Next Steps:"
echo "1. Ensure the directory for user files exists and has the correct permissions:"
echo "   sudo mkdir -p ${FILES_ROOT}"
echo "   # Please ensure the user running the Node.js process owns this directory."
echo "   # For example, if running under 'www-data':"
echo "   sudo chown -R www-data:www-data ${FILES_ROOT}"
echo ""
echo "2. Install project dependencies:"
echo "   npm install --prefix backend"
echo "   npm install --prefix frontend"
echo ""
echo "3. Build the frontend for production:"
echo "   npm run build --prefix frontend"
echo ""
echo "4. Start the backend server (we recommend using a process manager like pm2):"
echo "   # Example with pm2:"
echo "   # sudo npm install -g pm2"
echo "   # pm2 start npm --name desipanel-backend -- run start --prefix backend"
echo ""
